#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Clinic.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="clinic")]
	public partial class ClinicDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertVisit(Visit instance);
    partial void UpdateVisit(Visit instance);
    partial void DeleteVisit(Visit instance);
    partial void InsertDoctor(Doctor instance);
    partial void UpdateDoctor(Doctor instance);
    partial void DeleteDoctor(Doctor instance);
    partial void InsertLabAssistant(LabAssistant instance);
    partial void UpdateLabAssistant(LabAssistant instance);
    partial void DeleteLabAssistant(LabAssistant instance);
    partial void InsertLabManager(LabManager instance);
    partial void UpdateLabManager(LabManager instance);
    partial void DeleteLabManager(LabManager instance);
    partial void InsertPatient(Patient instance);
    partial void UpdatePatient(Patient instance);
    partial void DeletePatient(Patient instance);
    partial void InsertRegistrator(Registrator instance);
    partial void UpdateRegistrator(Registrator instance);
    partial void DeleteRegistrator(Registrator instance);
    partial void InsertTestDictionary(TestDictionary instance);
    partial void UpdateTestDictionary(TestDictionary instance);
    partial void DeleteTestDictionary(TestDictionary instance);
    partial void InsertLaboratoryTest(LaboratoryTest instance);
    partial void UpdateLaboratoryTest(LaboratoryTest instance);
    partial void DeleteLaboratoryTest(LaboratoryTest instance);
    partial void InsertPhysicalTest(PhysicalTest instance);
    partial void UpdatePhysicalTest(PhysicalTest instance);
    partial void DeletePhysicalTest(PhysicalTest instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public ClinicDataContext() : 
				base(global::Clinic.Data.Properties.Settings.Default.clinicConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ClinicDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ClinicDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ClinicDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ClinicDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
		
		public System.Data.Linq.Table<Visit> Visits
		{
			get
			{
				return this.GetTable<Visit>();
			}
		}
		
		public System.Data.Linq.Table<Doctor> Doctors
		{
			get
			{
				return this.GetTable<Doctor>();
			}
		}
		
		public System.Data.Linq.Table<LabAssistant> LabAssistants
		{
			get
			{
				return this.GetTable<LabAssistant>();
			}
		}
		
		public System.Data.Linq.Table<LabManager> LabManagers
		{
			get
			{
				return this.GetTable<LabManager>();
			}
		}
		
		public System.Data.Linq.Table<Patient> Patients
		{
			get
			{
				return this.GetTable<Patient>();
			}
		}
		
		public System.Data.Linq.Table<Registrator> Registrators
		{
			get
			{
				return this.GetTable<Registrator>();
			}
		}
		
		public System.Data.Linq.Table<TestDictionary> TestDictionaries
		{
			get
			{
				return this.GetTable<TestDictionary>();
			}
		}
		
		public System.Data.Linq.Table<LaboratoryTest> LaboratoryTests
		{
			get
			{
				return this.GetTable<LaboratoryTest>();
			}
		}
		
		public System.Data.Linq.Table<PhysicalTest> PhysicalTests
		{
			get
			{
				return this.GetTable<PhysicalTest>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Address")]
	public partial class Address
	{
		
		private long _city;
		
		private string _street;
		
		private int _house_no;
		
		private int _flat_no;
		
		private long _id_pat;
		
		public Address()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="city", Storage="_city", DbType="BigInt NOT NULL")]
		public long City
		{
			get
			{
				return this._city;
			}
			set
			{
				if ((this._city != value))
				{
					this._city = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="street", Storage="_street", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Street
		{
			get
			{
				return this._street;
			}
			set
			{
				if ((this._street != value))
				{
					this._street = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="house_no", Storage="_house_no", DbType="Int NOT NULL")]
		public int HouseNumber
		{
			get
			{
				return this._house_no;
			}
			set
			{
				if ((this._house_no != value))
				{
					this._house_no = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="flat_no", Storage="_flat_no", DbType="Int NOT NULL")]
		public int FlatNumber
		{
			get
			{
				return this._flat_no;
			}
			set
			{
				if ((this._flat_no != value))
				{
					this._flat_no = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="id_pat", Storage="_id_pat", DbType="BigInt NOT NULL")]
		public long PatientId
		{
			get
			{
				return this._id_pat;
			}
			set
			{
				if ((this._id_pat != value))
				{
					this._id_pat = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Visit")]
	public partial class Visit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id_visit;
		
		private string _description;
		
		private string _diagnosis;
		
		private string _status;
		
		private System.DateTime _dt_registry;
		
		private System.Nullable<System.DateTime> _dt_conf_canc;
		
		private long _id_reg;
		
		private long _id_pat;
		
		private System.Nullable<long> _id_doc;
		
		private EntitySet<LaboratoryTest> _Test_laboratories;
		
		private EntitySet<PhysicalTest> _Test_physicals;
		
		private EntityRef<Doctor> _Doctor;
		
		private EntityRef<Patient> _Patient;
		
		private EntityRef<Registrator> _Registrator;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDiagnosisChanging(string value);
    partial void OnDiagnosisChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnRegistrationDateChanging(System.DateTime value);
    partial void OnRegistrationDateChanged();
    partial void OnConrimationCancellationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnConrimationCancellationDateChanged();
    partial void OnRegistratorIdChanging(long value);
    partial void OnRegistratorIdChanged();
    partial void OnPatientIdChanging(long value);
    partial void OnPatientIdChanged();
    partial void OnDoctorIdChanging(System.Nullable<long> value);
    partial void OnDoctorIdChanged();
    #endregion
		
		public Visit()
		{
			this._Test_laboratories = new EntitySet<LaboratoryTest>(new Action<LaboratoryTest>(this.attach_Test_laboratories), new Action<LaboratoryTest>(this.detach_Test_laboratories));
			this._Test_physicals = new EntitySet<PhysicalTest>(new Action<PhysicalTest>(this.attach_Test_physicals), new Action<PhysicalTest>(this.detach_Test_physicals));
			this._Doctor = default(EntityRef<Doctor>);
			this._Patient = default(EntityRef<Patient>);
			this._Registrator = default(EntityRef<Registrator>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="id_visit", Storage="_id_visit", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long Id
		{
			get
			{
				return this._id_visit;
			}
			set
			{
				if ((this._id_visit != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._id_visit = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="description", Storage="_description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="diagnosis", Storage="_diagnosis", DbType="NVarChar(MAX)")]
		public string Diagnosis
		{
			get
			{
				return this._diagnosis;
			}
			set
			{
				if ((this._diagnosis != value))
				{
					this.OnDiagnosisChanging(value);
					this.SendPropertyChanging();
					this._diagnosis = value;
					this.SendPropertyChanged("Diagnosis");
					this.OnDiagnosisChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="status", Storage="_status", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="dt_registry", Storage="_dt_registry", DbType="DateTime NOT NULL")]
		public System.DateTime RegistrationDate
		{
			get
			{
				return this._dt_registry;
			}
			set
			{
				if ((this._dt_registry != value))
				{
					this.OnRegistrationDateChanging(value);
					this.SendPropertyChanging();
					this._dt_registry = value;
					this.SendPropertyChanged("RegistrationDate");
					this.OnRegistrationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[dt_conf|canc]", Storage="_dt_conf_canc", DbType="DateTime")]
		public System.Nullable<System.DateTime> ConrimationCancellationDate
		{
			get
			{
				return this._dt_conf_canc;
			}
			set
			{
				if ((this._dt_conf_canc != value))
				{
					this.OnConrimationCancellationDateChanging(value);
					this.SendPropertyChanging();
					this._dt_conf_canc = value;
					this.SendPropertyChanged("ConrimationCancellationDate");
					this.OnConrimationCancellationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="id_reg", Storage="_id_reg", DbType="BigInt NOT NULL")]
		public long RegistratorId
		{
			get
			{
				return this._id_reg;
			}
			set
			{
				if ((this._id_reg != value))
				{
					this.OnRegistratorIdChanging(value);
					this.SendPropertyChanging();
					this._id_reg = value;
					this.SendPropertyChanged("RegistratorId");
					this.OnRegistratorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="id_pat", Storage="_id_pat", DbType="BigInt NOT NULL")]
		public long PatientId
		{
			get
			{
				return this._id_pat;
			}
			set
			{
				if ((this._id_pat != value))
				{
					this.OnPatientIdChanging(value);
					this.SendPropertyChanging();
					this._id_pat = value;
					this.SendPropertyChanged("PatientId");
					this.OnPatientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="id_doc", Storage="_id_doc", DbType="BigInt")]
		public System.Nullable<long> DoctorId
		{
			get
			{
				return this._id_doc;
			}
			set
			{
				if ((this._id_doc != value))
				{
					this.OnDoctorIdChanging(value);
					this.SendPropertyChanging();
					this._id_doc = value;
					this.SendPropertyChanged("DoctorId");
					this.OnDoctorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Visit_LabolatoryTest", Storage="_Test_laboratories", ThisKey="Id", OtherKey="VisitId")]
		public EntitySet<LaboratoryTest> LaboratoryTests
		{
			get
			{
				return this._Test_laboratories;
			}
			set
			{
				this._Test_laboratories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Visit_PhysicalTest", Storage="_Test_physicals", ThisKey="Id", OtherKey="VisitId")]
		public EntitySet<PhysicalTest> PhysicalTests
		{
			get
			{
				return this._Test_physicals;
			}
			set
			{
				this._Test_physicals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Visit", Storage="_Doctor", ThisKey="DoctorId", OtherKey="Id", IsForeignKey=true)]
		public Doctor Doctor
		{
			get
			{
				return this._Doctor.Entity;
			}
			set
			{
				Doctor previousValue = this._Doctor.Entity;
				if (((previousValue != value) 
							|| (this._Doctor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Doctor.Entity = null;
						previousValue.Visits.Remove(this);
					}
					this._Doctor.Entity = value;
					if ((value != null))
					{
						value.Visits.Add(this);
						this._id_doc = value.Id;
					}
					else
					{
						this._id_doc = default(Nullable<long>);
					}
					this.SendPropertyChanged("Doctor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Visit", Storage="_Patient", ThisKey="PatientId", OtherKey="Id", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.Visits.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.Visits.Add(this);
						this._id_pat = value.Id;
					}
					else
					{
						this._id_pat = default(long);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Registrator_Visit", Storage="_Registrator", ThisKey="RegistratorId", OtherKey="Id", IsForeignKey=true)]
		public Registrator Registrator
		{
			get
			{
				return this._Registrator.Entity;
			}
			set
			{
				Registrator previousValue = this._Registrator.Entity;
				if (((previousValue != value) 
							|| (this._Registrator.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Registrator.Entity = null;
						previousValue.Visits.Remove(this);
					}
					this._Registrator.Entity = value;
					if ((value != null))
					{
						value.Visits.Add(this);
						this._id_reg = value.Id;
					}
					else
					{
						this._id_reg = default(long);
					}
					this.SendPropertyChanged("Registrator");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Test_laboratories(LaboratoryTest entity)
		{
			this.SendPropertyChanging();
			entity.Visit = this;
		}
		
		private void detach_Test_laboratories(LaboratoryTest entity)
		{
			this.SendPropertyChanging();
			entity.Visit = null;
		}
		
		private void attach_Test_physicals(PhysicalTest entity)
		{
			this.SendPropertyChanging();
			entity.Visit = this;
		}
		
		private void detach_Test_physicals(PhysicalTest entity)
		{
			this.SendPropertyChanging();
			entity.Visit = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Doctor")]
	public partial class Doctor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _licence_no;
		
		private string _name;
		
		private string _surname;
		
		private long _id_doc;
		
		private EntitySet<Visit> _Visits;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLicenseNumberChanging(string value);
    partial void OnLicenseNumberChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    #endregion
		
		public Doctor()
		{
			this._Visits = new EntitySet<Visit>(new Action<Visit>(this.attach_Visits), new Action<Visit>(this.detach_Visits));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="licence_no", Storage="_licence_no", DbType="NChar(10)")]
		public string LicenseNumber
		{
			get
			{
				return this._licence_no;
			}
			set
			{
				if ((this._licence_no != value))
				{
					this.OnLicenseNumberChanging(value);
					this.SendPropertyChanging();
					this._licence_no = value;
					this.SendPropertyChanged("LicenseNumber");
					this.OnLicenseNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="name", Storage="_name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="surname", Storage="_surname", DbType="NVarChar(50)")]
		public string Surname
		{
			get
			{
				return this._surname;
			}
			set
			{
				if ((this._surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="id_doc", Storage="_id_doc", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long Id
		{
			get
			{
				return this._id_doc;
			}
			set
			{
				if ((this._id_doc != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._id_doc = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Visit", Storage="_Visits", ThisKey="Id", OtherKey="DoctorId")]
		public EntitySet<Visit> Visits
		{
			get
			{
				return this._Visits;
			}
			set
			{
				this._Visits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Doctor", Storage="_User", ThisKey="Id", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Doctor = null;
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Doctor = this;
						this._id_doc = value.Id;
					}
					else
					{
						this._id_doc = default(long);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = this;
		}
		
		private void detach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lab_assistant")]
	public partial class LabAssistant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id_lab_ass;
		
		private string _name;
		
		private string _surname;
		
		private EntitySet<LaboratoryTest> _Test_laboratories;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    #endregion
		
		public LabAssistant()
		{
			this._Test_laboratories = new EntitySet<LaboratoryTest>(new Action<LaboratoryTest>(this.attach_Test_laboratories), new Action<LaboratoryTest>(this.detach_Test_laboratories));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="id_lab_ass", Storage="_id_lab_ass", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long Id
		{
			get
			{
				return this._id_lab_ass;
			}
			set
			{
				if ((this._id_lab_ass != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._id_lab_ass = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="name", Storage="_name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="surname", Storage="_surname", DbType="NVarChar(50)")]
		public string Surname
		{
			get
			{
				return this._surname;
			}
			set
			{
				if ((this._surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LabAssistant_LabolatoryTest", Storage="_Test_laboratories", ThisKey="Id", OtherKey="LabAssistantId")]
		public EntitySet<LaboratoryTest> LaboratoryTests
		{
			get
			{
				return this._Test_laboratories;
			}
			set
			{
				this._Test_laboratories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_LabAssistant", Storage="_User", ThisKey="Id", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Lab_assistant = null;
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Lab_assistant = this;
						this._id_lab_ass = value.Id;
					}
					else
					{
						this._id_lab_ass = default(long);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Test_laboratories(LaboratoryTest entity)
		{
			this.SendPropertyChanging();
			entity.LabAssistant = this;
		}
		
		private void detach_Test_laboratories(LaboratoryTest entity)
		{
			this.SendPropertyChanging();
			entity.LabAssistant = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lab_manager")]
	public partial class LabManager : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id_lab_manag;
		
		private string _name;
		
		private string _surname;
		
		private EntitySet<LaboratoryTest> _Test_laboratories;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    #endregion
		
		public LabManager()
		{
			this._Test_laboratories = new EntitySet<LaboratoryTest>(new Action<LaboratoryTest>(this.attach_Test_laboratories), new Action<LaboratoryTest>(this.detach_Test_laboratories));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="id_lab_manag", Storage="_id_lab_manag", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long Id
		{
			get
			{
				return this._id_lab_manag;
			}
			set
			{
				if ((this._id_lab_manag != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._id_lab_manag = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="name", Storage="_name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="surname", Storage="_surname", DbType="NVarChar(50)")]
		public string Surname
		{
			get
			{
				return this._surname;
			}
			set
			{
				if ((this._surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LabManager_LabolatoryTest", Storage="_Test_laboratories", ThisKey="Id", OtherKey="LabManagerId")]
		public EntitySet<LaboratoryTest> LaboratoryTests
		{
			get
			{
				return this._Test_laboratories;
			}
			set
			{
				this._Test_laboratories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_LabManager", Storage="_User", ThisKey="Id", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Lab_manager = null;
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Lab_manager = this;
						this._id_lab_manag = value.Id;
					}
					else
					{
						this._id_lab_manag = default(long);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Test_laboratories(LaboratoryTest entity)
		{
			this.SendPropertyChanging();
			entity.LabManager = this;
		}
		
		private void detach_Test_laboratories(LaboratoryTest entity)
		{
			this.SendPropertyChanging();
			entity.LabManager = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patient")]
	public partial class Patient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id_pat;
		
		private string _name;
		
		private string _surname;
		
		private int _PESEL;
		
		private EntitySet<Visit> _Visits;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnPESELChanging(int value);
    partial void OnPESELChanged();
    #endregion
		
		public Patient()
		{
			this._Visits = new EntitySet<Visit>(new Action<Visit>(this.attach_Visits), new Action<Visit>(this.detach_Visits));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="id_pat", Storage="_id_pat", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long Id
		{
			get
			{
				return this._id_pat;
			}
			set
			{
				if ((this._id_pat != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._id_pat = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="name", Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="surname", Storage="_surname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._surname;
			}
			set
			{
				if ((this._surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PESEL", DbType="Int NOT NULL")]
		public int PESEL
		{
			get
			{
				return this._PESEL;
			}
			set
			{
				if ((this._PESEL != value))
				{
					this.OnPESELChanging(value);
					this.SendPropertyChanging();
					this._PESEL = value;
					this.SendPropertyChanged("PESEL");
					this.OnPESELChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Visit", Storage="_Visits", ThisKey="Id", OtherKey="PatientId")]
		public EntitySet<Visit> Visits
		{
			get
			{
				return this._Visits;
			}
			set
			{
				this._Visits.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Registrator")]
	public partial class Registrator : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id_reg;
		
		private string _name;
		
		private string _surname;
		
		private EntitySet<Visit> _Visits;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    #endregion
		
		public Registrator()
		{
			this._Visits = new EntitySet<Visit>(new Action<Visit>(this.attach_Visits), new Action<Visit>(this.detach_Visits));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="id_reg", Storage="_id_reg", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long Id
		{
			get
			{
				return this._id_reg;
			}
			set
			{
				if ((this._id_reg != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._id_reg = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="name", Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="surname", Storage="_surname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._surname;
			}
			set
			{
				if ((this._surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Registrator_Visit", Storage="_Visits", ThisKey="Id", OtherKey="RegistratorId")]
		public EntitySet<Visit> Visits
		{
			get
			{
				return this._Visits;
			}
			set
			{
				this._Visits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Registrator", Storage="_User", ThisKey="Id", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Registrator = null;
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Registrator = this;
						this._id_reg = value.Id;
					}
					else
					{
						this._id_reg = default(long);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.Registrator = this;
		}
		
		private void detach_Visits(Visit entity)
		{
			this.SendPropertyChanging();
			entity.Registrator = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.test_dict")]
	public partial class TestDictionary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _code;
		
		private string _type;
		
		private string _name;
		
		private EntitySet<LaboratoryTest> _Test_laboratories;
		
		private EntitySet<PhysicalTest> _Test_physicals;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCodeChanging(long value);
    partial void OnCodeChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public TestDictionary()
		{
			this._Test_laboratories = new EntitySet<LaboratoryTest>(new Action<LaboratoryTest>(this.attach_Test_laboratories), new Action<LaboratoryTest>(this.detach_Test_laboratories));
			this._Test_physicals = new EntitySet<PhysicalTest>(new Action<PhysicalTest>(this.attach_Test_physicals), new Action<PhysicalTest>(this.detach_Test_physicals));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="code", Storage="_code", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long Code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="type", Storage="_type", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="name", Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestDictionary_LabolatoryTest", Storage="_Test_laboratories", ThisKey="Code", OtherKey="Code")]
		public EntitySet<LaboratoryTest> LaboratoryTests
		{
			get
			{
				return this._Test_laboratories;
			}
			set
			{
				this._Test_laboratories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestDictionary_PhysicalTest", Storage="_Test_physicals", ThisKey="Code", OtherKey="Code")]
		public EntitySet<PhysicalTest> PhysicalTests
		{
			get
			{
				return this._Test_physicals;
			}
			set
			{
				this._Test_physicals.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Test_laboratories(LaboratoryTest entity)
		{
			this.SendPropertyChanging();
			entity.TestDictionary = this;
		}
		
		private void detach_Test_laboratories(LaboratoryTest entity)
		{
			this.SendPropertyChanging();
			entity.TestDictionary = null;
		}
		
		private void attach_Test_physicals(PhysicalTest entity)
		{
			this.SendPropertyChanging();
			entity.TestDictionary = this;
		}
		
		private void detach_Test_physicals(PhysicalTest entity)
		{
			this.SendPropertyChanging();
			entity.TestDictionary = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Test_laboratory")]
	public partial class LaboratoryTest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id_test_lab;
		
		private string _doc_notes;
		
		private System.DateTime _dt_commis;
		
		private string _result;
		
		private System.Nullable<System.DateTime> _dt_exe;
		
		private string _manag_notes;
		
		private System.Nullable<System.DateTime> _dt_conf_canc;
		
		private string _status;
		
		private long _id_visit;
		
		private long _id_lab_manag;
		
		private System.Nullable<long> _id_lab_ass;
		
		private long _code;
		
		private EntityRef<LabAssistant> _Lab_assistant;
		
		private EntityRef<LabManager> _Lab_manager;
		
		private EntityRef<TestDictionary> _test_dict;
		
		private EntityRef<Visit> _Visit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnDoctorNotesChanging(string value);
    partial void OnDoctorNotesChanged();
    partial void OnComissionDateChanging(System.DateTime value);
    partial void OnComissionDateChanged();
    partial void OnResultChanging(string value);
    partial void OnResultChanged();
    partial void OnExecutionDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExecutionDateChanged();
    partial void OnLabManagerNotesChanging(string value);
    partial void OnLabManagerNotesChanged();
    partial void OnConfirmationCancellationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnConfirmationCancellationDateChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnVisitIdChanging(long value);
    partial void OnVisitIdChanged();
    partial void OnLabManagerIdChanging(long value);
    partial void OnLabManagerIdChanged();
    partial void OnLabAssistantIdChanging(System.Nullable<long> value);
    partial void OnLabAssistantIdChanged();
    partial void OnCodeChanging(long value);
    partial void OnCodeChanged();
    #endregion
		
		public LaboratoryTest()
		{
			this._Lab_assistant = default(EntityRef<LabAssistant>);
			this._Lab_manager = default(EntityRef<LabManager>);
			this._test_dict = default(EntityRef<TestDictionary>);
			this._Visit = default(EntityRef<Visit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="id_test_lab", Storage="_id_test_lab", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long Id
		{
			get
			{
				return this._id_test_lab;
			}
			set
			{
				if ((this._id_test_lab != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._id_test_lab = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="doc_notes", Storage="_doc_notes", DbType="NVarChar(MAX)")]
		public string DoctorNotes
		{
			get
			{
				return this._doc_notes;
			}
			set
			{
				if ((this._doc_notes != value))
				{
					this.OnDoctorNotesChanging(value);
					this.SendPropertyChanging();
					this._doc_notes = value;
					this.SendPropertyChanged("DoctorNotes");
					this.OnDoctorNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="dt_commis", Storage="_dt_commis", DbType="DateTime NOT NULL")]
		public System.DateTime ComissionDate
		{
			get
			{
				return this._dt_commis;
			}
			set
			{
				if ((this._dt_commis != value))
				{
					this.OnComissionDateChanging(value);
					this.SendPropertyChanging();
					this._dt_commis = value;
					this.SendPropertyChanged("ComissionDate");
					this.OnComissionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="result", Storage="_result", DbType="NVarChar(50)")]
		public string Result
		{
			get
			{
				return this._result;
			}
			set
			{
				if ((this._result != value))
				{
					this.OnResultChanging(value);
					this.SendPropertyChanging();
					this._result = value;
					this.SendPropertyChanged("Result");
					this.OnResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="dt_exe", Storage="_dt_exe", DbType="DateTime")]
		public System.Nullable<System.DateTime> ExecutionDate
		{
			get
			{
				return this._dt_exe;
			}
			set
			{
				if ((this._dt_exe != value))
				{
					this.OnExecutionDateChanging(value);
					this.SendPropertyChanging();
					this._dt_exe = value;
					this.SendPropertyChanged("ExecutionDate");
					this.OnExecutionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="manag_notes", Storage="_manag_notes", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string LabManagerNotes
		{
			get
			{
				return this._manag_notes;
			}
			set
			{
				if ((this._manag_notes != value))
				{
					this.OnLabManagerNotesChanging(value);
					this.SendPropertyChanging();
					this._manag_notes = value;
					this.SendPropertyChanged("LabManagerNotes");
					this.OnLabManagerNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[dt_conf|canc]", Storage="_dt_conf_canc", DbType="DateTime")]
		public System.Nullable<System.DateTime> ConfirmationCancellationDate
		{
			get
			{
				return this._dt_conf_canc;
			}
			set
			{
				if ((this._dt_conf_canc != value))
				{
					this.OnConfirmationCancellationDateChanging(value);
					this.SendPropertyChanging();
					this._dt_conf_canc = value;
					this.SendPropertyChanged("ConfirmationCancellationDate");
					this.OnConfirmationCancellationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="status", Storage="_status", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="id_visit", Storage="_id_visit", DbType="BigInt NOT NULL")]
		public long VisitId
		{
			get
			{
				return this._id_visit;
			}
			set
			{
				if ((this._id_visit != value))
				{
					this.OnVisitIdChanging(value);
					this.SendPropertyChanging();
					this._id_visit = value;
					this.SendPropertyChanged("VisitId");
					this.OnVisitIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="id_lab_manag", Storage="_id_lab_manag", DbType="BigInt NOT NULL")]
		public long LabManagerId
		{
			get
			{
				return this._id_lab_manag;
			}
			set
			{
				if ((this._id_lab_manag != value))
				{
					this.OnLabManagerIdChanging(value);
					this.SendPropertyChanging();
					this._id_lab_manag = value;
					this.SendPropertyChanged("LabManagerId");
					this.OnLabManagerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="id_lab_ass", Storage="_id_lab_ass", DbType="BigInt")]
		public System.Nullable<long> LabAssistantId
		{
			get
			{
				return this._id_lab_ass;
			}
			set
			{
				if ((this._id_lab_ass != value))
				{
					this.OnLabAssistantIdChanging(value);
					this.SendPropertyChanging();
					this._id_lab_ass = value;
					this.SendPropertyChanged("LabAssistantId");
					this.OnLabAssistantIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="code", Storage="_code", DbType="BigInt NOT NULL")]
		public long Code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LabAssistant_LabolatoryTest", Storage="_Lab_assistant", ThisKey="LabAssistantId", OtherKey="Id", IsForeignKey=true)]
		public LabAssistant LabAssistant
		{
			get
			{
				return this._Lab_assistant.Entity;
			}
			set
			{
				LabAssistant previousValue = this._Lab_assistant.Entity;
				if (((previousValue != value) 
							|| (this._Lab_assistant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lab_assistant.Entity = null;
						previousValue.LaboratoryTests.Remove(this);
					}
					this._Lab_assistant.Entity = value;
					if ((value != null))
					{
						value.LaboratoryTests.Add(this);
						this._id_lab_ass = value.Id;
					}
					else
					{
						this._id_lab_ass = default(Nullable<long>);
					}
					this.SendPropertyChanged("LabAssistant");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LabManager_LabolatoryTest", Storage="_Lab_manager", ThisKey="LabManagerId", OtherKey="Id", IsForeignKey=true)]
		public LabManager LabManager
		{
			get
			{
				return this._Lab_manager.Entity;
			}
			set
			{
				LabManager previousValue = this._Lab_manager.Entity;
				if (((previousValue != value) 
							|| (this._Lab_manager.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lab_manager.Entity = null;
						previousValue.LaboratoryTests.Remove(this);
					}
					this._Lab_manager.Entity = value;
					if ((value != null))
					{
						value.LaboratoryTests.Add(this);
						this._id_lab_manag = value.Id;
					}
					else
					{
						this._id_lab_manag = default(long);
					}
					this.SendPropertyChanged("LabManager");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestDictionary_LabolatoryTest", Storage="_test_dict", ThisKey="Code", OtherKey="Code", IsForeignKey=true)]
		public TestDictionary TestDictionary
		{
			get
			{
				return this._test_dict.Entity;
			}
			set
			{
				TestDictionary previousValue = this._test_dict.Entity;
				if (((previousValue != value) 
							|| (this._test_dict.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._test_dict.Entity = null;
						previousValue.LaboratoryTests.Remove(this);
					}
					this._test_dict.Entity = value;
					if ((value != null))
					{
						value.LaboratoryTests.Add(this);
						this._code = value.Code;
					}
					else
					{
						this._code = default(long);
					}
					this.SendPropertyChanged("TestDictionary");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Visit_LabolatoryTest", Storage="_Visit", ThisKey="VisitId", OtherKey="Id", IsForeignKey=true)]
		public Visit Visit
		{
			get
			{
				return this._Visit.Entity;
			}
			set
			{
				Visit previousValue = this._Visit.Entity;
				if (((previousValue != value) 
							|| (this._Visit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Visit.Entity = null;
						previousValue.LaboratoryTests.Remove(this);
					}
					this._Visit.Entity = value;
					if ((value != null))
					{
						value.LaboratoryTests.Add(this);
						this._id_visit = value.Id;
					}
					else
					{
						this._id_visit = default(long);
					}
					this.SendPropertyChanged("Visit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Test_physical")]
	public partial class PhysicalTest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _id_test_phys;
		
		private string _result;
		
		private long _id_visit;
		
		private long _code;
		
		private EntityRef<TestDictionary> _test_dict;
		
		private EntityRef<Visit> _Visit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnResultChanging(string value);
    partial void OnResultChanged();
    partial void OnVisitIdChanging(long value);
    partial void OnVisitIdChanged();
    partial void OnCodeChanging(long value);
    partial void OnCodeChanged();
    #endregion
		
		public PhysicalTest()
		{
			this._test_dict = default(EntityRef<TestDictionary>);
			this._Visit = default(EntityRef<Visit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="id_test_phys", Storage="_id_test_phys", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long Id
		{
			get
			{
				return this._id_test_phys;
			}
			set
			{
				if ((this._id_test_phys != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._id_test_phys = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="result", Storage="_result", DbType="NVarChar(MAX)")]
		public string Result
		{
			get
			{
				return this._result;
			}
			set
			{
				if ((this._result != value))
				{
					this.OnResultChanging(value);
					this.SendPropertyChanging();
					this._result = value;
					this.SendPropertyChanged("Result");
					this.OnResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="id_visit", Storage="_id_visit", DbType="BigInt NOT NULL")]
		public long VisitId
		{
			get
			{
				return this._id_visit;
			}
			set
			{
				if ((this._id_visit != value))
				{
					this.OnVisitIdChanging(value);
					this.SendPropertyChanging();
					this._id_visit = value;
					this.SendPropertyChanged("VisitId");
					this.OnVisitIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="code", Storage="_code", DbType="BigInt NOT NULL")]
		public long Code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestDictionary_PhysicalTest", Storage="_test_dict", ThisKey="Code", OtherKey="Code", IsForeignKey=true)]
		public TestDictionary TestDictionary
		{
			get
			{
				return this._test_dict.Entity;
			}
			set
			{
				TestDictionary previousValue = this._test_dict.Entity;
				if (((previousValue != value) 
							|| (this._test_dict.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._test_dict.Entity = null;
						previousValue.PhysicalTests.Remove(this);
					}
					this._test_dict.Entity = value;
					if ((value != null))
					{
						value.PhysicalTests.Add(this);
						this._code = value.Code;
					}
					else
					{
						this._code = default(long);
					}
					this.SendPropertyChanged("TestDictionary");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Visit_PhysicalTest", Storage="_Visit", ThisKey="VisitId", OtherKey="Id", IsForeignKey=true)]
		public Visit Visit
		{
			get
			{
				return this._Visit.Entity;
			}
			set
			{
				Visit previousValue = this._Visit.Entity;
				if (((previousValue != value) 
							|| (this._Visit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Visit.Entity = null;
						previousValue.PhysicalTests.Remove(this);
					}
					this._Visit.Entity = value;
					if ((value != null))
					{
						value.PhysicalTests.Add(this);
						this._id_visit = value.Id;
					}
					else
					{
						this._id_visit = default(long);
					}
					this.SendPropertyChanged("Visit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _username;
		
		private string _pass;
		
		private System.DateTime _dt_registry;
		
		private string _role;
		
		private long _id_user;
		
		private EntityRef<Doctor> _Doctor;
		
		private EntityRef<LabAssistant> _Lab_assistant;
		
		private EntityRef<LabManager> _Lab_manager;
		
		private EntityRef<Registrator> _Registrator;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnRegistrationDateChanging(System.DateTime value);
    partial void OnRegistrationDateChanged();
    partial void OnRoleChanging(string value);
    partial void OnRoleChanged();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    #endregion
		
		public User()
		{
			this._Doctor = default(EntityRef<Doctor>);
			this._Lab_assistant = default(EntityRef<LabAssistant>);
			this._Lab_manager = default(EntityRef<LabManager>);
			this._Registrator = default(EntityRef<Registrator>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="username", Storage="_username", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="pass", Storage="_pass", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._pass;
			}
			set
			{
				if ((this._pass != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._pass = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="dt_registry", Storage="_dt_registry", DbType="DateTime NOT NULL")]
		public System.DateTime RegistrationDate
		{
			get
			{
				return this._dt_registry;
			}
			set
			{
				if ((this._dt_registry != value))
				{
					this.OnRegistrationDateChanging(value);
					this.SendPropertyChanging();
					this._dt_registry = value;
					this.SendPropertyChanged("RegistrationDate");
					this.OnRegistrationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="role", Storage="_role", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Role
		{
			get
			{
				return this._role;
			}
			set
			{
				if ((this._role != value))
				{
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="id_user", Storage="_id_user", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long Id
		{
			get
			{
				return this._id_user;
			}
			set
			{
				if ((this._id_user != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._id_user = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Doctor", Storage="_Doctor", ThisKey="Id", OtherKey="Id", IsUnique=true, IsForeignKey=false)]
		public Doctor Doctor
		{
			get
			{
				return this._Doctor.Entity;
			}
			set
			{
				Doctor previousValue = this._Doctor.Entity;
				if (((previousValue != value) 
							|| (this._Doctor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Doctor.Entity = null;
						previousValue.User = null;
					}
					this._Doctor.Entity = value;
					if ((value != null))
					{
						value.User = this;
					}
					this.SendPropertyChanged("Doctor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_LabAssistant", Storage="_Lab_assistant", ThisKey="Id", OtherKey="Id", IsUnique=true, IsForeignKey=false)]
		public LabAssistant Lab_assistant
		{
			get
			{
				return this._Lab_assistant.Entity;
			}
			set
			{
				LabAssistant previousValue = this._Lab_assistant.Entity;
				if (((previousValue != value) 
							|| (this._Lab_assistant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lab_assistant.Entity = null;
						previousValue.User = null;
					}
					this._Lab_assistant.Entity = value;
					if ((value != null))
					{
						value.User = this;
					}
					this.SendPropertyChanged("Lab_assistant");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_LabManager", Storage="_Lab_manager", ThisKey="Id", OtherKey="Id", IsUnique=true, IsForeignKey=false)]
		public LabManager Lab_manager
		{
			get
			{
				return this._Lab_manager.Entity;
			}
			set
			{
				LabManager previousValue = this._Lab_manager.Entity;
				if (((previousValue != value) 
							|| (this._Lab_manager.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lab_manager.Entity = null;
						previousValue.User = null;
					}
					this._Lab_manager.Entity = value;
					if ((value != null))
					{
						value.User = this;
					}
					this.SendPropertyChanged("Lab_manager");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Registrator", Storage="_Registrator", ThisKey="Id", OtherKey="Id", IsUnique=true, IsForeignKey=false)]
		public Registrator Registrator
		{
			get
			{
				return this._Registrator.Entity;
			}
			set
			{
				Registrator previousValue = this._Registrator.Entity;
				if (((previousValue != value) 
							|| (this._Registrator.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Registrator.Entity = null;
						previousValue.User = null;
					}
					this._Registrator.Entity = value;
					if ((value != null))
					{
						value.User = this;
					}
					this.SendPropertyChanged("Registrator");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
